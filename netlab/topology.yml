defaults.device: frr

provider: clab
defaults.providers.clab.bridge_type: ovs-bridge

module: [ bgp,ospf]


nodes:
  r1:
    bgp.as: 65001
    bgp.advertise_loopback: True
    bgp.originate: [ 5.0.0.0/24 ]
    config: ['device_config/r1.j2']
    id: 1
    loopback:
      ipv4: 10.0.0.1/32
  r2:
    bgp.as: 65001
    bgp.advertise_loopback: True
    bgp.originate: [ 5.0.0.0/24 ]
    config: ['device_config/r2.j2']
    id: 2
    loopback:
       ipv4: 10.0.0.2/32
  isp1:
    bgp.originate: [ 0.0.0.0/0 ]
    bgp.as: 64512

  isp2:
    bgp.originate: [ 0.0.0.0/0 ]
    bgp.as: 64513

  server1:
    device: linux
    id: 5

  server2:
    device: linux
    id: 6

  remote_host1:
    device: linux
    id: 7

  remote_host2:
    device: linux
    id: 8


links:
- r1:
  r2:
  ospf.area: 0.0.0.0
  ospf.bfd: true

- r1:
  isp1:
  pool: isp1

- r2:
  isp2:
  pool: isp2
- r1-server1
- r2-server2
- isp1-remote_host1
- isp2-remote_host2

#Defined Custom IP Addresses pools for isp1 and 2
addressing.isp1.ipv4: 169.254.100.0/24
addressing.isp1.prefix: 30
addressing.isp2.ipv4: 169.254.200.0/24
addressing.isp2.prefix: 30

validate:
   wait:
    description: Waiting for BGP to stabilize
    wait: 45

   ping1:
    description: Server1 Ping to remote_host1
    nodes: [ server1 ]
    devices: [ linux ]
    exec: ping -c 5 -W 1 -A remote_host1
    valid: |
      "64 bytes" in stdout

   ping2:
    description: Server2 Ping to remote_host2
    nodes: [ server2 ]
    devices: [ linux ]
    exec: ping -c 5 -W 1 -A remote_host2
    valid: |
      "64 bytes" in stdout

validate:
  adj:
    description: Check for OSPF adjacencies
    wait: 20
    nodes: [ r2 ]
    plugin: ospf_neighbor(nodes.r1.ospf.router_id)


  neighbors:
    description: Check whether r1 & r2 have bgp neigborship
    wait: 20
    wait_msg: Wait for BGP prefix origination and BGP convergence
    nodes: [ r1 ]
    plugin: bgp_neighbor(node.bgp.neighbors,'r2')


  pfx_r1_isp1:
    description: Check if Private IP r1 is adv to ISP1
    wait: 5
    nodes: [ isp1 ]
    pass: r1 is correctly NOT advertising 10.0.0.1
    fail: r1 is advertising 10.0.0.1 , breaking RFC 7454
    plugin: bgp_prefix(nodes.r1.loopback.ipv4,state='missing')
    

  pfx_r2_isp2:
    description: Check if Private IP r2 is adv to ISP2
    wait: 5
    nodes: [ isp2 ]
    pass: r2 is correctly NOT advertising 10.0.0.2
    fail: r2 is advertising 10.0.0.2 , breaking RFC 7454
    plugin: bgp_prefix(nodes.r2.loopback.ipv4,state='missing')
 
  as_path_r1:
    description: Check the AS path of the prefix advertised by ISP1 to r1
    fail: The AS path is not what we expected
    nodes: [ r1 ]
    plugin: >-
      bgp_prefix(
      nodes.isp1.bgp.originate[0],
      aspath='64512')
 
  as_path_r2:
    description: Check the AS path of the prefix advertised by ISP2 to r2
    fail: The AS path is not what we expected
    nodes: [ r2 ]
    plugin: >-
      bgp_prefix(
      nodes.isp2.bgp.originate[0],
      aspath='64513')

  prefix:
    description: Check whether r1 & r2 advertises the beacon prefix
    wait: 20
    wait_msg: Wait for BGP prefix origination and BGP convergence
    nodes: [ isp1, isp2]
    plugin: bgp_prefix('5.0.0.0/24')

  maxprefixr1:
    description: Check Number of Prefixes r1 Recieved 
    nodes: [r1]
    fail: Max Prefix of 5 Not Honored 
    pass: Max Prefix is honored 
    show:
      frr: ip bgp neighbors 169.254.100.1 prefix-counts json
    valid:
      frr: >
        ribTableWalkCounters.Useable < 5

  maxprefixr2:
    description: Check Number of Prefixes r2 Recieved 
    nodes: [r2]
    fail: Max Prefix of 5 Not Honored 
    pass: Max Prefix is honored 
    show:
      frr: ip bgp neighbors 169.254.200.1 prefix-counts json
    valid:
      frr: >
        ribTableWalkCounters.Useable < 5